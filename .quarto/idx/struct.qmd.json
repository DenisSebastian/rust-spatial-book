{"title":"Structs, Enums y Traits","markdown":{"yaml":{"subtitle":"Diseñando una Ciudad en Rust"},"headingText":"Structs, Enums y Traits","containsRefs":false,"markdown":"\n\n\nRust ofrece herramientas poderosas para organizar datos y definir comportamientos. Los **Structs**, **Enums**, y **Traits** son fundamentales para escribir código limpio, eficiente y mantenible.\n\nEn este capítulo, exploraremos cómo estos tres conceptos funcionan y se relacionan, utilizando la analogía de una **ciudad** para facilitar su comprensión.\n\n\n\n## Structs: Los Planos de los Edificios\n\n### ¿Qué son los Structs?\n\nUn `struct` es una **estructura de datos** que agrupa múltiples valores bajo un solo nombre. Estos valores, conocidos como **campos**, pueden ser de diferentes tipos. Los structs se utilizan para representar entidades concretas, como objetos del mundo real o elementos lógicos.\n\n### Tipos de Structs\n\nRust ofrece tres tipos principales de structs:\n\n1. **Structs Nombrados**: Tienen campos con nombres explícitos.\n2. **Structs Tuple**: Contienen valores sin nombres específicos.\n3. **Structs Unitarios**: No contienen campos y sirven como marcadores o identificadores.\n\n**Relación con el Código**\n\nLos structs son fundamentales para modelar datos complejos. Permiten agrupar atributos relacionados de forma estructurada.\n\n\n::: {.callout-tip}\n##  🕋 Analogía: Un Plano Arquitectónico\n\n\nPiensa en un struct como el plano de un edificio. Este plano describe características como:\n\n- Nombre del edificio\n- Número de pisos\n- Color\n:::\n\n\nCada struct es un plano único que define cómo construir un tipo de edificio.\n\n\nEjemplo de Structs\n\n```rust\n// Struct nombrado\nstruct Edificio {\n    nombre: String,\n    pisos: u32,\n    color: String,\n}\n\n// Struct tuple\nstruct Coordenadas(f64, f64);\n\n// Struct unitario\nstruct SeñalDeTrafico;\n```\n\n---\n\n## Enums: Tipos de Edificios en la Ciudad\n\n### ¿Qué son los Enums?\n\nUn `enum` es un tipo de dato que representa un conjunto de **variantes**. Cada variante puede almacenar datos asociados, lo que permite modelar diferentes estados o tipos dentro de un mismo contexto.\n\n**Relación con el Código**\n\nLos enums son ideales para manejar situaciones en las que un valor puede tener múltiples formas o estados. Además, permiten incluir datos adicionales en cada variante.\n\n::: {.callout-tip}\n##  🕋 Analogía: Un Catálogo de Tipos de Edificios\n\n\nImagina que el enum es un catálogo de edificios en la ciudad. Cada variante describe un tipo de edificio:\n\n- Una casa con habitaciones y un jardín.\n- Un hospital con camas y un área de emergencias.\n- Una oficina con empleados y pisos.\n:::\n\n\nEjemplo de Enums\n\n```rust\nenum TipoDeEdificio {\n    Casa { habitaciones: u32, jardin: bool },\n    Hospital { camas: u32, tiene_emergencias: bool },\n    Oficina { empleados: u32, pisos: u32 },\n}\n```\n\n\n## Traits: Las Habilidades de los Edificios\n\n### ¿Qué son los Traits?\n\nUn `trait` define un conjunto de **métodos** que un tipo debe implementar. Son similares a interfaces en otros lenguajes y permiten compartir comportamientos entre tipos diferentes.\n\n**Relación con el Código**\n\nLos traits permiten que diferentes tipos, como structs y enums, compartan comportamientos. También son esenciales para el polimorfismo en Rust.\n\n\n\n::: {.callout-tip}\n##  🕋 Analogía: Funcionalidades de los Edificios\n\nUn trait es como una funcionalidad que los edificios pueden adoptar:\n\n- Algunos edificios tienen luces automáticas.\n- Otros pueden ser resistentes a terremotos.\n- Algunos tienen ascensores.\n\nCada edificio puede implementar uno o más traits según las funcionalidades que necesita.\n:::\n\nEjemplo de Traits\n\n```rust\ntrait Habilidad {\n    fn activar_funcion(&self) -> String;\n}\n\nimpl Habilidad for Edificio {\n    fn activar_funcion(&self) -> String {\n        format!(\"El edificio {} activa sus luces automáticas.\", self.nombre)\n    }\n}\n```\n\n---\n\n## Ejemplo Integrado: Diseñando una Ciudad con Structs, Enums y Traits\n\nCombinemos estos tres conceptos para diseñar una ciudad con edificios, tipos de edificios y habilidades compartidas.\n\nCódigo de Ejemplo\n\n```rust\n// Struct para representar un edificio\nstruct Edificio {\n    nombre: String,\n    pisos: u32,\n}\n\n// Enum para representar tipos de edificios\nenum TipoDeEdificio {\n    Casa,\n    Hospital,\n    Oficina,\n}\n\n// Trait para definir habilidades\ntrait Habilidad {\n    fn activar_funcion(&self) -> String;\n}\n\n// Implementación del Trait para Struct\nimpl Habilidad for Edificio {\n    fn activar_funcion(&self) -> String {\n        format!(\"El edificio {} activa sus luces automáticas.\", self.nombre)\n    }\n}\n\n// Implementación del Trait para Enum\nimpl Habilidad for TipoDeEdificio {\n    fn activar_funcion(&self) -> String {\n        match self {\n            TipoDeEdificio::Casa => \"La casa utiliza energía renovable.\".to_string(),\n            TipoDeEdificio::Hospital => \"El hospital activa su sistema de emergencias.\".to_string(),\n            TipoDeEdificio::Oficina => \"La oficina enciende su aire acondicionado.\".to_string(),\n        }\n    }\n}\n\nfn main() {\n    let edificio = Edificio {\n        nombre: \"Edificio Central\".to_string(),\n        pisos: 10,\n    };\n\n    let tipo = TipoDeEdificio::Hospital;\n\n    println!(\"{}\", edificio.activar_funcion());\n    println!(\"{}\", tipo.activar_funcion());\n}\n```\n\n**Salida**\n\n```console\nEl edificio Edificio Central activa sus luces automáticas.\nEl hospital activa su sistema de emergencias.\n```\n\n---\n\n## Conclusión\n\nEn Rust, **Structs, Enums y Traits** trabajan juntos para organizar datos y definir comportamientos. Usando la analogía de una ciudad:\n\n- Los structs son los planos de los edificios.\n- Los enums son los tipos de edificios que puedes construir.\n- Los traits son las habilidades que los edificios pueden tener.\n\nEsta combinación permite crear software modular, claro y extensible, al igual que diseñar una ciudad bien planificada.\n","srcMarkdownNoYaml":"\n\n# Structs, Enums y Traits\n\nRust ofrece herramientas poderosas para organizar datos y definir comportamientos. Los **Structs**, **Enums**, y **Traits** son fundamentales para escribir código limpio, eficiente y mantenible.\n\nEn este capítulo, exploraremos cómo estos tres conceptos funcionan y se relacionan, utilizando la analogía de una **ciudad** para facilitar su comprensión.\n\n\n\n## Structs: Los Planos de los Edificios\n\n### ¿Qué son los Structs?\n\nUn `struct` es una **estructura de datos** que agrupa múltiples valores bajo un solo nombre. Estos valores, conocidos como **campos**, pueden ser de diferentes tipos. Los structs se utilizan para representar entidades concretas, como objetos del mundo real o elementos lógicos.\n\n### Tipos de Structs\n\nRust ofrece tres tipos principales de structs:\n\n1. **Structs Nombrados**: Tienen campos con nombres explícitos.\n2. **Structs Tuple**: Contienen valores sin nombres específicos.\n3. **Structs Unitarios**: No contienen campos y sirven como marcadores o identificadores.\n\n**Relación con el Código**\n\nLos structs son fundamentales para modelar datos complejos. Permiten agrupar atributos relacionados de forma estructurada.\n\n\n::: {.callout-tip}\n##  🕋 Analogía: Un Plano Arquitectónico\n\n\nPiensa en un struct como el plano de un edificio. Este plano describe características como:\n\n- Nombre del edificio\n- Número de pisos\n- Color\n:::\n\n\nCada struct es un plano único que define cómo construir un tipo de edificio.\n\n\nEjemplo de Structs\n\n```rust\n// Struct nombrado\nstruct Edificio {\n    nombre: String,\n    pisos: u32,\n    color: String,\n}\n\n// Struct tuple\nstruct Coordenadas(f64, f64);\n\n// Struct unitario\nstruct SeñalDeTrafico;\n```\n\n---\n\n## Enums: Tipos de Edificios en la Ciudad\n\n### ¿Qué son los Enums?\n\nUn `enum` es un tipo de dato que representa un conjunto de **variantes**. Cada variante puede almacenar datos asociados, lo que permite modelar diferentes estados o tipos dentro de un mismo contexto.\n\n**Relación con el Código**\n\nLos enums son ideales para manejar situaciones en las que un valor puede tener múltiples formas o estados. Además, permiten incluir datos adicionales en cada variante.\n\n::: {.callout-tip}\n##  🕋 Analogía: Un Catálogo de Tipos de Edificios\n\n\nImagina que el enum es un catálogo de edificios en la ciudad. Cada variante describe un tipo de edificio:\n\n- Una casa con habitaciones y un jardín.\n- Un hospital con camas y un área de emergencias.\n- Una oficina con empleados y pisos.\n:::\n\n\nEjemplo de Enums\n\n```rust\nenum TipoDeEdificio {\n    Casa { habitaciones: u32, jardin: bool },\n    Hospital { camas: u32, tiene_emergencias: bool },\n    Oficina { empleados: u32, pisos: u32 },\n}\n```\n\n\n## Traits: Las Habilidades de los Edificios\n\n### ¿Qué son los Traits?\n\nUn `trait` define un conjunto de **métodos** que un tipo debe implementar. Son similares a interfaces en otros lenguajes y permiten compartir comportamientos entre tipos diferentes.\n\n**Relación con el Código**\n\nLos traits permiten que diferentes tipos, como structs y enums, compartan comportamientos. También son esenciales para el polimorfismo en Rust.\n\n\n\n::: {.callout-tip}\n##  🕋 Analogía: Funcionalidades de los Edificios\n\nUn trait es como una funcionalidad que los edificios pueden adoptar:\n\n- Algunos edificios tienen luces automáticas.\n- Otros pueden ser resistentes a terremotos.\n- Algunos tienen ascensores.\n\nCada edificio puede implementar uno o más traits según las funcionalidades que necesita.\n:::\n\nEjemplo de Traits\n\n```rust\ntrait Habilidad {\n    fn activar_funcion(&self) -> String;\n}\n\nimpl Habilidad for Edificio {\n    fn activar_funcion(&self) -> String {\n        format!(\"El edificio {} activa sus luces automáticas.\", self.nombre)\n    }\n}\n```\n\n---\n\n## Ejemplo Integrado: Diseñando una Ciudad con Structs, Enums y Traits\n\nCombinemos estos tres conceptos para diseñar una ciudad con edificios, tipos de edificios y habilidades compartidas.\n\nCódigo de Ejemplo\n\n```rust\n// Struct para representar un edificio\nstruct Edificio {\n    nombre: String,\n    pisos: u32,\n}\n\n// Enum para representar tipos de edificios\nenum TipoDeEdificio {\n    Casa,\n    Hospital,\n    Oficina,\n}\n\n// Trait para definir habilidades\ntrait Habilidad {\n    fn activar_funcion(&self) -> String;\n}\n\n// Implementación del Trait para Struct\nimpl Habilidad for Edificio {\n    fn activar_funcion(&self) -> String {\n        format!(\"El edificio {} activa sus luces automáticas.\", self.nombre)\n    }\n}\n\n// Implementación del Trait para Enum\nimpl Habilidad for TipoDeEdificio {\n    fn activar_funcion(&self) -> String {\n        match self {\n            TipoDeEdificio::Casa => \"La casa utiliza energía renovable.\".to_string(),\n            TipoDeEdificio::Hospital => \"El hospital activa su sistema de emergencias.\".to_string(),\n            TipoDeEdificio::Oficina => \"La oficina enciende su aire acondicionado.\".to_string(),\n        }\n    }\n}\n\nfn main() {\n    let edificio = Edificio {\n        nombre: \"Edificio Central\".to_string(),\n        pisos: 10,\n    };\n\n    let tipo = TipoDeEdificio::Hospital;\n\n    println!(\"{}\", edificio.activar_funcion());\n    println!(\"{}\", tipo.activar_funcion());\n}\n```\n\n**Salida**\n\n```console\nEl edificio Edificio Central activa sus luces automáticas.\nEl hospital activa su sistema de emergencias.\n```\n\n---\n\n## Conclusión\n\nEn Rust, **Structs, Enums y Traits** trabajan juntos para organizar datos y definir comportamientos. Usando la analogía de una ciudad:\n\n- Los structs son los planos de los edificios.\n- Los enums son los tipos de edificios que puedes construir.\n- Los traits son las habilidades que los edificios pueden tener.\n\nEsta combinación permite crear software modular, claro y extensible, al igual que diseñar una ciudad bien planificada.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"center","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","css":["styles/style.css"],"output-file":"struct.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","bibliography":["references.bib"],"editor":"source","always_allow_html":true,"_quarto-vars":{"version":1,"email":{"author":"<denis.berroeta@uai.cl>"},"profesor":{"name":"[Denis Berroeta](https://cit.uai.cl/denis-berroeta/)","cargo":"Coordinador de Investigación, Centro de Inteligencia Territorial - UAI","email":"<denis.berroeta@uai.cl>"},"engine":{"jupyter":"[Jupyter](https://jupyter.org)","knitr":"[Knitr](<https://yihui.name/knitr>)","R":"[R Project](https://www.r-project.org)","python":"[Python](https://docs.python.org/es/3/tutorial/)"},"software":{"rstudio":"[RStudio](https://posit.co/products/open-source/rstudio/)"},"library":{"sf":"[Simple Features for R](https://r-spatial.github.io/sf/articles/sf1.html)","dplyr":"[dplyr](https://dplyr.tidyverse.org)","purrr":"[purrr](https://purrr.tidyverse.org)","mapview":"[mapview](https://r-spatial.github.io/mapview/)","lubridate":"[lubridate](https://lubridate.tidyverse.org)","tidyr":"[tidyr](https://tidyr.tidyverse.org)","plotly":"[plotly](https://plotly.com/r/)","ggplot":"[ggplot2](https://ggplot2.tidyverse.org/)"},"organization":{"ine":"[Instituto Nacional de Estadísticas](https://www.ine.gob.cl)","cran":"[CRAN (Comprehensive R Archive Network)](https://cran.r-project.org/)","bioconductor":"[Bioconductor](https://www.bioconductor.org/)","github":"[Github](https://github.com/)","rforge":"[R-Forge](https://r-forge.r-project.org/)"}},"theme":"cosmo","fig-cap-location":"margin","tab-cap-location":"left","mailto":"denis.berroeta@uai.cl","code-block-bg":"#f0f0f0","code-block-border-left":"#31BAE9","subtitle":"Diseñando una Ciudad en Rust"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}