{"title":"Ownership y Borrowing","markdown":{"headingText":"Ownership y Borrowing","containsRefs":false,"markdown":"\n\nEl sistema de **Ownership** (propiedad) y **Borrowing** (pr√©stamo) es el coraz√≥n de Rust y lo que garantiza su **seguridad en memoria** sin necesidad de un recolector de basura. Aunque puede sonar complejo al principio, usando analog√≠as simples podemos descomponerlo en conceptos f√°ciles de entender.\n\n## Definci√≥n\n\nEl ownership es un conjunto de reglas que definen c√≥mo un programa de Rust administra la memoria. Todos los programas tienen que administrar la forma en que usan la memoria de un computador mientras se ejecutan. Algunos lenguajes tienen recolecci√≥n de basura que busca regularmente la memoria que ya no se usa mientras el programa se ejecuta; en otros lenguajes, el programador debe asignar y liberar la memoria expl√≠citamente. Rust usa un tercer enfoque: la memoria se administra a trav√©s de un sistema de ownership con un conjunto de reglas que el compilador verifica. Si alguna de las reglas se viola, el programa no se compilar√°. Ninguna de las caracter√≠sticas del ownership ralentizar√° su programa mientras se ejecuta.\n\n\n## Ownership\n\nEn Rust, cada valor tiene un **due√±o**. Piensa en una mochila que contiene un objeto (datos). Solo **una persona** puede ser due√±a de esa mochila en un momento dado.\n\n**Reglas de Ownership**\n\n1. Cada valor en Rust tiene un **due√±o √∫nico**.\n2. Cuando el due√±o \"deja de existir\" (sale de su alcance), los datos se eliminan autom√°ticamente (**drop**).\n\n\n::: {.callout-tip}\n## üß≥ Analog√≠a \"El Due√±o de la Mochila\"\n\nImagina que tienes una mochila que representa la memoria en Rust. Solo t√∫ puedes poseer esa mochila. Si decides pasar la mochila a otra persona, ya no puedes usarla, porque ahora esa persona es la nueva due√±a.\n:::\n\nEjemplo en C√≥digo\n\n```rust\nfn main() {\n    let mochila = String::from(\"Mis pertenencias\"); // La mochila tiene un due√±o\n    let nueva_mochila = mochila; // La propiedad se transfiere\n    // println!(\"{}\", mochila); // Error: \"mochila\" ya no es v√°lida.\n    println!(\"{}\", nueva_mochila); // Ahora \"nueva_mochila\" es el due√±o.\n}\n```\n\n## Borrowing\n\nA veces, en lugar de transferir completamente la propiedad, necesitas **prestar** tu mochila a alguien m√°s. En Rust, esto se logra usando **referencias**.\n\n**Reglas de Borrowing**\n\n1. Puedes **prestar tu mochila** (crear una referencia) sin transferir la propiedad.\n2. Hay dos tipos de pr√©stamos:\n   - **Pr√©stamos inmutables** (`&`): Puedes prestar tu mochila para mirarla, pero nadie puede modificarla.\n   - **Pr√©stamos mutables** (`&mut`): Puedes prestar tu mochila para que la modifiquen, pero solo a una persona a la vez.\n\n\n::: {.callout-tip}\n## üß≥ Analog√≠a: \"Pr√©stamos Temporales\"\n\n- **Pr√©stamo inmutable**: Prestas tu mochila a un amigo para que la mire, pero no puede tocar nada dentro.\n- **Pr√©stamo mutable**: Prestas tu mochila a un amigo, pero le adviertes que nadie m√°s puede tocarla mientras √©l la tenga.\n:::\n\n\n\nEjemplo en C√≥digo\n\n```rust\nfn main() {\n    let mochila = String::from(\"Mis pertenencias\");\n    \n    // Pr√©stamo inmutable\n    let referencia = &mochila;\n    println!(\"{}\", referencia); // Puedo mirar el contenido.\n    println!(\"{}\", mochila); // Y todav√≠a soy el due√±o.\n\n    // Pr√©stamo mutable\n    let mut mochila_mutable = String::from(\"Mochila vieja\");\n    let referencia_mutable = &mut mochila_mutable;\n    referencia_mutable.push_str(\" actualizada\");\n    println!(\"{}\", referencia_mutable); // Mochila modificada.\n}\n```\n\n\n## Lifetimes\n\nCuando prestas algo, el tiempo que alguien lo tiene debe ser **claro** para evitar conflictos. En Rust, esto se maneja con las **lifetimes**.\n\n**Reglas B√°sicas**\n1. Un pr√©stamo no puede durar m√°s que el due√±o original.\n2. El compilador verifica que todos los pr√©stamos sean seguros.\n\n\n::: {.callout-tip}\n## üß≥ Analog√≠a: \"Duraci√≥n del Pr√©stamo\"\n\nImagina que tu amigo tiene que devolverte la mochila antes de que t√∫ te vayas de la reuni√≥n, o ambos estar√°n en problemas.\n:::\n\n\n\n\nEjemplo en C√≥digo\n\n```rust\nfn main() {\n    let mochila = String::from(\"Mis cosas\");\n    let referencia = &mochila; // El pr√©stamo es v√°lido aqu√≠.\n    println!(\"{}\", referencia); // Todav√≠a puedo usar la referencia.\n\n    // Cuando la mochila \"muere\", la referencia tambi√©n deja de ser v√°lida.\n}\n```\n\n## Resumen Visual\n\n\n| Concepto          | Analog√≠a                             | C√≥digo                   |\n|--------------------|--------------------------------------|--------------------------|\n| Ownership          | Mochila transferida a otro due√±o.   | `let b = a;`            |\n| Borrowing          | Mochila prestada temporalmente.     | `let b = &a;`           |\n| Borrowing mutable  | Mochila prestada para modificarla.  | `let b = &mut a;`       |\n| Lifetimes          | Tiempo l√≠mite del pr√©stamo.         | `let r = &x;`           |\n\n\n\n## Slices\n\nEn Rust, los **slices** son una forma especial de pr√©stamo, que permite acceder a una parte de una colecci√≥n (como un array o un `String`) sin transferir la propiedad ni copiar los datos.\n\n::: {.callout-tip}\n## üß≥ Analog√≠a: \"Un vistazo a la mochila\"\n\nImagina que est√°s en una sala de reuniones con mochilas (que representan los datos):\n1. El **inspector** verifica que solo haya **un due√±o por mochila**.\n2. Si alguien toma prestada una mochila (una referencia):\n   - Si es un pr√©stamo inmutable, otras personas pueden mirar, pero nadie puede modificar.\n   - Si es un pr√©stamo mutable, nadie m√°s puede mirar ni tocar hasta que se devuelva.\n3. Al final, el inspector revisa que nadie intente usar una mochila que ya no est√° en la sala (lifetime expirado).\n\n:::\n\n- Un **slice inmutable** es como prestar tu mochila abierta y decir: ‚ÄúMira solo lo que est√° en el bolsillo lateral‚Äù, pero no puedes tocar ni cambiar nada.\n- Un **slice mutable** es como prestar el bolsillo lateral y permitir que lo reorganicen, pero sin tocar el resto de la mochila.\n\nEjemplo: Slice Inmutable\n\n```rust\nfn main() {\n    let array = [1, 2, 3, 4, 5];\n    let slice = &array[1..4]; // Slice inmutable que incluye los elementos 2, 3, 4\n    println!(\"{:?}\", slice); // Imprime: [2, 3, 4]\n    println!(\"{:?}\", array); // La colecci√≥n original sigue siendo accesible\n}\n```\n\nEjemplo: Slice Mutable\n\n```rust\nfn main() {\n    let mut array = [1, 2, 3, 4, 5];\n    let slice = &mut array[1..4]; // Slice mutable\n    slice[0] = 10; // Modifico solo el primer elemento del slice\n    println!(\"{:?}\", slice); // Imprime: [10, 3, 4]\n    println!(\"{:?}\", array); // Imprime: [1, 10, 3, 4, 5] (el array original tambi√©n cambia)\n}\n```\n\n**Relaci√≥n con Ownership y Borrowing**\n\nLos slices son **referencias** (`&` o `&mut`), lo que significa que respetan todas las reglas de **ownership** y **borrowing**:\n\n1. **Ownership**:\n   - El slice nunca toma posesi√≥n de los datos; solo los presta temporalmente.\n\n2. **Borrowing**:\n   - Siguen las mismas reglas que las referencias:\n     - Un slice mutable (`&mut`) y otro slice o referencia no pueden coexistir.\n     - Los slices no pueden durar m√°s que la colecci√≥n original de la que provienen.\n\nEjemplo: Regla de Borrowing con Slices\n\n```rust\nfn main() {\n    let mut array = [1, 2, 3, 4, 5];\n    let slice = &array[1..4]; // Pr√©stamo inmutable\n    // let mutable_slice = &mut array[2..4]; // Error: No puedes mutar mientras hay un pr√©stamo inmutable activo\n    println!(\"{:?}\", slice);\n}\n```\n\nLos slices son herramientas poderosas para acceder a partes de datos sin necesidad de copiar ni transferir propiedad, lo que los hace eficientes y seguros. Son una extensi√≥n directa del sistema de **ownership y borrowing**, y demuestran c√≥mo Rust optimiza el manejo de datos respetando la seguridad de memoria.\n\n\n\n## Borrow Checker\n\nEl **Borrow Checker** es una herramienta interna del compilador de Rust que garantiza que todas las reglas de **ownership**, **borrowing** y **lifetimes** se respeten en tiempo de compilaci√≥n. Esto asegura que los programas sean seguros en memoria y libres de errores comunes como referencias colgantes o conflictos de pr√©stamos.\n\n\n::: {.callout-tip}\n## üß≥ Analog√≠a: \"El inspector en la sala de reuniones\"\n\nImagina que est√°s en una sala de reuniones con mochilas (que representan los datos):\n\n1. El **inspector** verifica que solo haya **un due√±o por mochila**.\n2. Si alguien toma prestada una mochila (una referencia):\n   - Si es un pr√©stamo inmutable, otras personas pueden mirar, pero nadie puede modificar.\n   - Si es un pr√©stamo mutable, nadie m√°s puede mirar ni tocar hasta que se devuelva.\n3. Al final, el inspector revisa que nadie intente usar una mochila que ya no est√° en la sala (lifetime expirado).\n:::\n\n\n\n\n**¬øQu√© valida el Borrow Checker?**\n\n1. **Ownership**:\n   - Cada valor tiene un √∫nico due√±o.\n   - Los valores se liberan autom√°ticamente cuando su due√±o sale de alcance.\n2. **Borrowing**:\n   - Permite m√∫ltiples pr√©stamos inmutables o un √∫nico pr√©stamo mutable, pero no ambos a la vez.\n3. **Lifetimes**:\n   - Las referencias no deben vivir m√°s tiempo que el valor original.\n\nEjemplo de Borrow Checker en Acci√≥n\n\n```rust\nfn main() {\n    let mut mochila = String::from(\"Mis cosas\");\n\n    // Pr√©stamos inmutables\n    let prestamo1 = &mochila; \n    let prestamo2 = &mochila; \n    println!(\"{}, {}\", prestamo1, prestamo2); // Esto es v√°lido\n\n    // Pr√©stamo mutable conflictivo\n    // let prestamo_mutable = &mut mochila; \n    // Error: No puedes tener pr√©stamos mutables e inmutables al mismo tiempo\n}\n```\n\nEjemplo de Error con Borrow Checker\n\n```rust\nfn main() {\n    let referencia;\n    {\n        let mochila = String::from(\"Temporal\");\n        referencia = &mochila; // Error: La referencia vive m√°s que el valor original\n    }\n    // println!(\"{}\", referencia); // El Borrow Checker impide este uso.\n}\n```\n\nEl **Borrow Checker** act√∫a como un inspector que asegura que:\n\n- Los datos sean usados de manera segura y eficiente.\n- No haya referencias colgantes ni conflictos de acceso.\n\nGracias al Borrow Checker, Rust garantiza seguridad de memoria en tiempo de compilaci√≥n, haciendo innecesario un recolector de basura y optimizando el rendimiento del programa.\n\n\n\n## Errores Comunes y C√≥mo Evitarlos\n\n\n### Uso despu√©s de transferencia\n\n- **Error**: Usar un valor despu√©s de transferir su propiedad.\n- **Ejemplo**:\n\n```rust\n  fn main() {\n      let mochila = String::from(\"Mis pertenencias\");\n      let nueva_mochila = mochila; // Propiedad transferida\n      // println!(\"{}\", mochila); // Error: \"mochila\" ya no es v√°lida.\n  }\n```\n- **Soluci√≥n**: Revisa si has movido el valor o usa referencias si necesitas acceder a √©l.\n\n\n### Conflictos en pr√©stamos mutables\n\n- **Error**: Prestar un valor de forma mutable mientras tienes pr√©stamos inmutables activos.\n- **Ejemplo**:\n\n```rust\n  fn main() {\n      let mut mochila = String::from(\"Mis cosas\");\n      let referencia1 = &mochila; // Pr√©stamo inmutable\n      let referencia2 = &mut mochila; // Error: No puedes prestar de forma mutable mientras hay un pr√©stamo inmutable\n  }\n```\n- **Soluci√≥n**: Aseg√∫rate de que no hay m√∫ltiples accesos conflictivos al mismo tiempo.\n\n\n### Referencias a datos no v√°lidos\n\n- **Error**: Crear una referencia que vive m√°s que el valor original.\n- **Ejemplo**:\n\n```rust\n  fn main() {\n      let referencia;\n      {\n          let mochila = String::from(\"Temporal\");\n          referencia = &mochila; // Error: La referencia vive m√°s que el valor original\n      }\n      // println!(\"{}\", referencia); // No v√°lido\n  }\n```\n\n- **Soluci√≥n**: Aseg√∫rate de que los pr√©stamos no duren m√°s que el valor original.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":false,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"center","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","html-math-method":"katex","css":["styles/style.css"],"output-file":"ownership.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.554","bibliography":["references.bib"],"editor":"source","always_allow_html":true,"_quarto-vars":{"version":1,"email":{"author":"<denis.berroeta@uai.cl>"},"profesor":{"name":"[Denis Berroeta](https://cit.uai.cl/denis-berroeta/)","cargo":"Coordinador de Investigaci√≥n, Centro de Inteligencia Territorial - UAI","email":"<denis.berroeta@uai.cl>"},"engine":{"jupyter":"[Jupyter](https://jupyter.org)","knitr":"[Knitr](<https://yihui.name/knitr>)","R":"[R Project](https://www.r-project.org)","python":"[Python](https://docs.python.org/es/3/tutorial/)"},"software":{"rstudio":"[RStudio](https://posit.co/products/open-source/rstudio/)"},"library":{"sf":"[Simple Features for R](https://r-spatial.github.io/sf/articles/sf1.html)","dplyr":"[dplyr](https://dplyr.tidyverse.org)","purrr":"[purrr](https://purrr.tidyverse.org)","mapview":"[mapview](https://r-spatial.github.io/mapview/)","lubridate":"[lubridate](https://lubridate.tidyverse.org)","tidyr":"[tidyr](https://tidyr.tidyverse.org)","plotly":"[plotly](https://plotly.com/r/)","ggplot":"[ggplot2](https://ggplot2.tidyverse.org/)"},"organization":{"ine":"[Instituto Nacional de Estad√≠sticas](https://www.ine.gob.cl)","cran":"[CRAN (Comprehensive R Archive Network)](https://cran.r-project.org/)","bioconductor":"[Bioconductor](https://www.bioconductor.org/)","github":"[Github](https://github.com/)","rforge":"[R-Forge](https://r-forge.r-project.org/)"}},"theme":"cosmo","fig-cap-location":"margin","tab-cap-location":"left","mailto":"denis.berroeta@uai.cl","code-block-bg":true,"code-block-border-left":"#31BAE9"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}