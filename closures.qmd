
# Closures

Un closure (o cierre) en Rust es una función anónima que puede capturar variables del entorno en el que se define. Los closures son muy flexibles y pueden aceptar parámetros, devolver valores y, a diferencia de las funciones normales, pueden capturar y utilizar variables que no se les pasan explícitamente.

Los closures se definen usando la siguiente sintaxis:

```rust
|parametros| expresión
```

Son comunes en Rust para trabajar con iteradores y otras operaciones funcionales, como map y filter.

**Definición Básica**

Aquí tienes un ejemplo básico de un closure que suma dos números:

```rust
fn main() {
    let suma = |a, b| a + b;
    println!("La suma es: {}", suma(2, 3));
}
```


En este ejemplo:

- `|a, b|` es la lista de parámetros del closure.
- `a + b` es la expresión que se ejecuta cuando se llama al closure.
- Se llama al closure con suma(2, 3), y el resultado es 5.

**Captura de Variables**

Una característica clave de los closures es su capacidad para capturar variables del entorno en el que fueron definidos. Pueden capturar variables por referencia, por préstamo mutable o por posesión, dependiendo de cómo se utilicen.

```rust
fn main() {
    let x = 4;
    let closure = |y| x + y;
    println!("Resultado: {}", closure(3));  // Imprime 7
}
```
En este caso, el closure closure captura la variable x del entorno y la utiliza en su cuerpo.

**Closures que Capturan por Referencia, Mutable y por Posesión**

Los closures pueden capturar variables de diferentes maneras:

Por referencia
: El closure accede a la variable sin tomar posesión de ella.

```rust
fn main() {
    let x = 5;
    let capturar_x = || println!("x: {}", x);  // Captura `x` por referencia
    capturar_x();
}
```


Por mutabilidad
: El closure puede modificar la variable.

```rust
fn main() {
    let mut x = 5;
    let mut modificar_x = || x += 1;  // Captura `x` por mutabilidad
    modificar_x();
    println!("x: {}", x);  // Imprime 6
}
```


Por posesión
: El closure toma posesión de la variable, lo que impide su uso fuera del closure.

```rust
fn main() {
    let x = String::from("Hola");
    let capturar_x = || {
        let _y = x;  // Captura `x` por posesión
    };
    capturar_x();
    // Aquí `x` ya no es accesible porque fue capturado por posesión
}
```

**Closures con Tipos y Anotaciones de Parámetros**

En la mayoría de los casos, Rust puede inferir los tipos de los parámetros de un closure, por lo que no es necesario especificarlos. Sin embargo, también puedes hacerlo explícitamente si lo deseas:

```rust
fn main() {
    let suma = |a: i32, b: i32| -> i32 { a + b };
    println!("La suma es: {}", suma(10, 5));
}
```
En este caso, hemos anotado los tipos de los parámetros (i32) y el tipo de retorno del closure (i32).


Closures y Funciones

A diferencia de las funciones, los closures pueden capturar variables del entorno. Sin embargo, los closures y las funciones comparten algunas similitudes. Los closures se pueden almacenar en variables, pasar como argumentos o devolver desde otras funciones, al igual que las funciones.

Los closures también pueden ser pasados como parámetros a funciones que esperan un trait como `Fn`, `FnMut`, o `FnOnce`

**Traits Fn, FnMut, y FnOnce**

Rust proporciona tres traits principales para closures, dependiendo de cómo el closure maneje las variables capturadas:

1.	Fn: El closure no modifica ni toma posesión de las variables que captura. Se llama múltiples veces sin efectos secundarios.
2.	FnMut: El closure puede modificar las variables que captura, pero no toma posesión de ellas. Se llama múltiples veces, pero puede tener efectos secundarios.
3.	FnOnce: El closure toma posesión de las variables que captura, por lo que solo puede ser llamado una vez.

Por ejemplo:


```rust
fn ejecutar_closure<F>(f: F) 
where
    F: Fn(i32) -> i32 
{
    println!("Resultado: {}", f(5));
}

fn main() {
    let closure = |x| x + 1;
    ejecutar_closure(closure);
}

```
Aquí, ejecutar_closure acepta un parámetro F que implementa el trait Fn, lo que permite pasarle closures que no modifican las variables capturadas.

**Closures como Retorno**

También puedes devolver un closure desde una función, utilizando el trait adecuado:

```rust
fn crear_closure() -> impl Fn(i32) -> i32 {
    |x| x + 1
}

fn main() {
    let mi_closure = crear_closure();
    println!("Resultado: {}", mi_closure(10));  // Imprime 11
}
```

Aquí, la función crear_closure devuelve un closure que toma un entero y devuelve ese entero incrementado en uno.

**Closures en Iteradores**

Los closures son ampliamente utilizados en operaciones con iteradores, como map, filter, fold, entre otros. Estos métodos aceptan closures para realizar operaciones sobre cada elemento de una colección.

Por ejemplo, el uso de un closure con map para elevar al cuadrado los números de un vector:

```rust
fn main() {
    let numeros = vec![1, 2, 3, 4];
    let cuadrados: Vec<i32> = numeros.iter().map(|x| x * x).collect();
    println!("{:?}", cuadrados);  // Imprime [1, 4, 9, 16]
}
```

